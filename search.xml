<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>机器学习系列（1）—— 感知机</title>
      <link href="2020/ml1-perception/"/>
      <url>2020/ml1-perception/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用ssh免密登录服务器</title>
      <link href="2020/usessh/"/>
      <url>2020/usessh/</url>
      
        <content type="html"><![CDATA[<ul><li><p>在服务器端使用<code>ssh-keygen</code>生成密钥对，在用户的家目录中生成了一个 .ssh 的隐藏目录，内含两个密钥文件，id_rsa 为私钥，id_rsa.pub 为公钥。</p><pre><code>cd ~/.sshcat id_rsa.pub &gt;&gt; authorized_keyschmod 600 authorized_keyschmod 700 ~/.ssh</code></pre></li><li><p>设置 SSH，打开密钥登录功能，编辑 /etc/ssh/sshd_config 文件，进行如下设置：</p><pre><code>RSAAuthentication yesPubkeyAuthentication yes</code></pre></li><li><p>重启ssh服务</p><pre><code>/etc/init.d/ssh restart</code></pre></li><li><p>在本地~/.ssh/目录下新建一个文件（名字随便取）,将服务器端的私钥id_rsa里的全部内容复制到新建的文件中，并将该文件权限改为<code>0600</code></p><blockquote><p>注意，windows用户“~”目录一般为<code>C:\Users\***</code></p></blockquote></li><li><p>本地使用下面命令进行登陆</p><pre><code>ssh xxx@xxx.xxx.xxx.xxx -p [端口号] -i ~/.ssh/[filename]</code></pre></li><li><p>设置别称，方便下次登录，在用户配置文件中用<code>alias</code>给上述命令取一个别称。</p><pre><code>vim ~/.bashrcalias xxx = 'ssh xxx@xxx.xxx.xxx.xxx -p [端口号] -i ~/.ssh/[filename]'</code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vscode + Github + Hexo构建个人博客</title>
      <link href="2020/createblog/"/>
      <url>2020/createblog/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><blockquote><p>一直想着打造个人博客，总结知识，现在终于开始动手了。</p></blockquote><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>前后尝试了两种不同的写作方式</strong></p><ol><li><p><a href="https://github.com/getgridea/gridea">静态博客写作客户端Gridea</a></p><blockquote><p>这种方式非常简单，可以像写笔记一样写博客，省去了很多麻烦。但目前支持的主题比较少，定制化功能也不够完整，不能支持<code>vim</code>快捷键，试用了一段时间后还是放弃了，没用过的还是非常推荐试一下的。</p></blockquote></li><li><p>基于hexo构建博客站</p><blockquote><p>也比较简单，主题丰富，浅层次定制化比较简单，但若想深度定制化就需要前端知识了。（目前这块还比较薄弱，逐步完善ing…）<br>关于如何基于Hexo构建已经有非常多文章介绍了:<br><a href="https://yafine-blog.cn/posts/4ab2.html">Hexo+github 搭建博客 (超级详细版，精细入微)</a><br><a href="https://blog.licardo.cn/posts/36692/">Hexo 搭建个人博客详细教程</a></p></blockquote></li></ol><p>这里，我主要针对第二种方式介绍自己<strong>使用到的工具</strong>以及期间<strong>碰到的问题和解决方式</strong></p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="使用到的工具"><a href="#使用到的工具" class="headerlink" title="使用到的工具"></a>使用到的工具</h4><ul><li><p>Github Page</p><blockquote><p>托管博客网站</p></blockquote></li><li><p>Hexo</p><blockquote><p>建站框架，拥有丰富的<a href="https://hexo.io/themes/">主题</a>，这里推荐两款主题: <a href="https://github.com/blinkfox/hexo-theme-matery">Matery</a> 和 <a href="https://github.com/jerryc127/hexo-theme-butterfly">butterfly</a></p></blockquote></li><li><p>阿里云 / 腾讯云 / 华为云 / …</p><blockquote><p>域名服务商，提供域名服务，可以自定义博客域名，而不是使用默认的[username.github.io]。  </p></blockquote></li><li><p>VScode</p><blockquote><p>博客编辑，一款越来越喜欢的编辑神器。<br>安装插件<code>Markdown Preview Enhanced </code>后开启markdown预览功能，就很舒服了！</p></blockquote></li></ul><h4 id="问题-amp-解决方案"><a href="#问题-amp-解决方案" class="headerlink" title="问题 &amp; 解决方案"></a>问题 &amp; 解决方案</h4><h5 id="1-如何自定义域名"><a href="#1-如何自定义域名" class="headerlink" title="1. 如何自定义域名"></a>1. 如何自定义域名</h5><ul><li><p>注册一个域名</p><blockquote><p>我选择了阿里云，学生注册第一年免费试用，其他的应该也有类似优惠。</p></blockquote></li><li><p>解析域名，两种方式可选</p><blockquote><p>(1) 用A记录，即使用ip地址，ip地址可以用<code>dig username.github.io +noall +answer</code>获得，一般会得到多个ip地址，每个都添加一个A记录即可。<br>(2) 用CNAME记录，即别名转换，一般会添加两条记录，这样就可以通过多种方式访问自己的博客了。<br><img src="cname.png" alt="CNAME"></p></blockquote></li><li><p>添加到github中</p><blockquote><p>在[username.github.io]的setting页面下，输入自己设置的域名（只需要到二级域名即可），第一次时HTTPS会变成不可选，仔细读提示后发现要过一段时间才能选择。（我等了大概半小时就可以了）<br><img src="github-dns.png" alt="github-dns"></p></blockquote></li><li><p>添加CNAME文件</p><blockquote><p>上面操作结束后，每一次重新部署(<code>hexo d</code>)都会自动覆盖掉上一步的域名填入，这里需要在<code>source</code>目录下新建一个<code>CNAME</code>文件（无后缀），里面就只需填入注册的域名名字即可。<br>注：是在source目录下新建，不是根目录下！</p></blockquote></li></ul><h5 id="2-vscode中的hexo快捷键设置"><a href="#2-vscode中的hexo快捷键设置" class="headerlink" title="2. vscode中的hexo快捷键设置"></a>2. vscode中的hexo快捷键设置</h5><blockquote><p>利用<code>vscode</code>的task机制，创建两个最常用功能的快捷键“本地预览”和“远程部署” 。参考自<a href="https://blog.vlitter.top/post/make-vscode-be-the-best-editor-for-hexo/">将VS Code打造成Hexo博客的最佳编辑器</a></p></blockquote><p>一般地，除了个性化设置外，正常博客编写只需要用到<code>_posts</code>目录了，因此推荐在<code>_posts</code>目录下进行下面操作</p><ul><li>定义功能命令脚本</li></ul><p>(1) 新建预览功能脚本：<code>bins &gt; preview.sh</code></p><pre><code>export PATH=/usr/local/lib/nodejs/node-$VERSION-$DISTRO/bin:$PATHhexo server</code></pre><p>(2) 新建部署功能脚本：<code>bins &gt; post.sh</code></p><pre><code>export PATH=/usr/local/lib/nodejs/node-$VERSION-$DISTRO/bin:$PATHhexo clean &amp;&amp; hexo generate --deploy</code></pre><p><strong>Note:</strong> 因为vscode中的task打开的是非交互式的终端，因此需要用<code>export</code>加载<code>node</code>环境，否则会报<code>node</code>找不到的异常。貌似<code>windows</code>中是不需要这样的。</p><ul><li>定义任务配置<blockquote><p>新建<code>.vscode &gt; tasks.json</code>文件，里面定义用到的任务配置。</p></blockquote><pre><code>{  "version": "2.0.0",  "tasks": [      {          "label": "HexoPost",          "type": "shell",          "command": "${workspaceRoot}/bins/post.sh",                 "group": {              "kind": "build",              "isDefault": true          },          "presentation": {              "echo": true,              "reveal": "always",              "panel": "new"          }      },      {          "label": "HexoPreview",          "type": "shell",          "command": "${workspaceRoot}/bins/preview.sh",                 "group": {              "kind": "test",              "isDefault": true          },          "presentation": {              "echo": true,              "reveal": "always",              "panel": "new"          }      },  ]}</code></pre></li></ul><p><strong>Note:</strong> 上述任务重新定义了<code>build</code>和<code>test</code>两个任务。</p><ul><li>重定义快捷键<blockquote><p>打开键盘快捷键更改界面（<code>mac</code>下是输入<code>command+k</code>后紧接着输入<code>command+s</code>）。<br>在打开的界面中输入<code>任务</code>两个字，找到对应条目双击后就能更改快捷键设置。<br><img src="task-map.png"></p></blockquote></li></ul><h5 id="3-posts中文档的目录设置"><a href="#3-posts中文档的目录设置" class="headerlink" title="3. posts中文档的目录设置"></a>3. posts中文档的目录设置</h5><blockquote><p>一般新建的文档都直接在<code>_posts</code>目录下，如果时间长了，则文档结构有点乱，因此希望按照自己的需求在这个目录下设置不同的目录结构。这里希望改成按照年份组织文档。</p></blockquote><ul><li>最简单的方法<br>更改<code>hexo</code>根目录下的<code>_config.yml</code>中的<code>permalink</code>属性，将其改为<code>:year/:month/:day/:name/</code>。即将后面的<code>:title</code>改为了<code>:name</code>。</li></ul><p><strong>Note:</strong> <code>permalink</code>表示浏览器搜索栏中显示的文档路径编排方式，其中，<code>:title</code>表示的是文档相对于<code>_posts</code>的相对路径，而<code>:name</code>是文档的名称。</p><h3 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h3><blockquote><p>作为一个新人，一切还不熟悉，慢慢长大，逐渐完善自己的贝壳屋！</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 说明文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>由置换操作&quot;a,b = b,a&quot;引发的一些思考</title>
      <link href="2020/pythonreplacement/"/>
      <url>2020/pythonreplacement/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在C或者C++中，交换两个变量的值，一般需要借由中间变量实现（某些情况下可以直接通过加减实现，但这种不够安全）。<br>但是，在Python中，竟可以直接通过“a,b = b,a”实现，这是如何做到的呢？以及这种实现方式有什么需要注意的吗？</p></blockquote><a id="more"></a><h4 id="如何做到的？"><a href="#如何做到的？" class="headerlink" title="如何做到的？"></a>如何做到的？</h4><blockquote><p> 核心在于，python中变量存储的并不直接存储数值，而是存储这个值的引用（也可以理解为内存地址）！</p></blockquote><ul><li>示例：<pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----置换前------"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a的地址:"</span><span class="token punctuation">,</span> id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b的地址:"</span><span class="token punctuation">,</span> id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span>b <span class="token operator">=</span> b<span class="token punctuation">,</span>a<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----置换后------"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a的地址:"</span><span class="token punctuation">,</span> id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b的地址:"</span><span class="token punctuation">,</span> id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>```</li><li>—-置换前——<br>1 2<br>a的地址: 94538685764384<br>b的地址: 94538685764416</li><li>—-置换后——<br>2 1<br>a的地址: 94538685764416<br>b的地址: 94538685764384<pre><code></code></pre></li></ul><blockquote><p>所以，在python中交换两个数值时，<strong>内存地址上存储的数值并不发生变化</strong>，而是直接对变量重新赋值即可（地址值）。因此，python的置换操作不仅仅支持两个值，还支持多个值之间的置换。</p></blockquote><h4 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h4><blockquote><p>这两天在刷Leetcode时， <a href="https://leetcode-cn.com/problems/first-missing-positive/">题目：缺失的第一个正数</a>，碰到了一个问题……</p></blockquote><ul><li>示例1<pre class="line-numbers language-python"><code class="language-python">nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[3, 2, 1, 4, 5]</code></pre>置换成功，似乎没有什么问题，但我们交换一下置换的顺序。</li><li>示例2<pre class="line-numbers language-python"><code class="language-python">nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[2, 1, 1, 4, 5]</code></pre><blockquote><p>啊？！结果怎么就完全不一样了？直觉告诉我们，应该是既有对<code>nums[2]</code>的赋值，又有对<code>nums[2]</code>的引用了。所以这两个冲突了？两个示例的区别就是赋值在前与在后的问题。<br>目前，关于这个问题我在python文档中还没有找到严格的定义，下面说一下碰到这种问题时，我们从<code>执行逻辑</code>的角度怎么看待。</p></blockquote></li></ul><p>我们可以将<code>nums[2], nums[nums[2]-1] = nums[nums[2]-1], nums[2]</code>这行语句拆解成以下几个步骤进行：</p><ol><li>计算等式右边的值，得到<code>nums[2], nums[nums[2]-1] = 1, 2</code>。</li><li>赋值语句从左往右依次执行。首先得到<code>nums[2]=1</code>（<strong>注意这个时候<code>nums[2]</code>的值已经变了</strong>），接着计算<code>nums[nums[2]-1]=nums[1-1]=nums[0]=2</code>。</li><li>所以，最终的值变成了<code>[2,1,1,4,5]</code></li></ol><p>总结一下，就是<code>先计算得到等号右边的所有数值，再将值依次赋给等号的左边</code>。</p><h4 id="一个思考"><a href="#一个思考" class="headerlink" title="一个思考"></a>一个思考</h4><blockquote><p>如果python中变量存储的是地址值的话，那么列表中元素的地址是连续的吗？</p></blockquote><ul><li>答案<blockquote><p>不是的</p></blockquote></li></ul><p>在列表刚刚初始化时，可能会发现元素的地址似乎确实是连续的</p><pre class="line-numbers language-python"><code class="language-python">nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>9453868576438494538685764416945386857644489453868576448094538685764512</code></pre><p>但如果我们交换其中两个元素的位置，就会发现地址不连续了。</p><pre class="line-numbers language-python"><code class="language-python">nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[1, 3, 2, 4, 5]9453868576438494538685764448945386857644169453868576448094538685764512</code></pre><p>可以看到，<code>nums[1]</code>与<code>nums[2]</code>的地址顺序就变了。</p><blockquote><p>其实，刚开始时是连续的是因为Python中给List分配空间时采用“逐步扩增”的增量式方法。但地址连不连续对python中的List中元素的访问影响并不大。还是那个原因，python中变量存储的是地址值，而不是实际的元素值。所以只要地址值存放的位置是连续的就可以支持<code>随机访问</code>和<code>切片操作</code>了。这样其实也有一个问题，就是地址的不连续还是会带来内存访问的开销……</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开始的地方</title>
      <link href="2020/start/"/>
      <url>2020/start/</url>
      
        <content type="html"><![CDATA[<blockquote><p>象牙塔的日子就要看到终点了，一个全新的起点也即将开始。总觉得要慢慢开始写点啥了，雁过留痕，风过留声。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 杂想间 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 起点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VScode使用Tips</title>
      <link href="2020/usevscode/"/>
      <url>2020/usevscode/</url>
      
        <content type="html"><![CDATA[<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><blockquote><p>vscode中的配置分用户区（User）和工作区（Workspace）。<br>覆盖范围：用户区 &gt; 工作区<br>优先级：工作区 &gt; 用户区</p></blockquote><h4 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h4><blockquote><p>编程语言相关插件就不说了，直接按照官方推荐来就好了。</p></blockquote><ul><li>Remote Development<blockquote><p>一个远程连接工具包，目前只用到了里面的<code>remote-ssh</code>，用于连接服务器。<br>可以直接将服务器上一切在本地vscode中使用，简直不要太爽！！！</p></blockquote></li></ul><p><strong>连接方式</strong><br>左侧点击插件-&gt;点击齿轮-&gt;修改配置信息</p><pre><code>Host 随便取个名    HostName [主机ip]    User [用户名]    IdentityFile [如果设置了ssh密钥登陆，这里填写密钥地址，否则，可以不用此项]</code></pre><blockquote><p><strong>注意</strong>: 连接成功后，会在服务器的用户根目录下创建一个<code>.vscode-server</code>文件夹，里面存放远端vscode配置信息。第一次连接或者vscode更新时，服务器需要连网。<br>传送门：<a href="./ssh.md">如何通过ssh免密登录服务器</a></p></blockquote><ul><li>配色和字体推荐  <blockquote><p>配色推荐：Monokai Pro(直接在扩展中心安装即可)<br>字体推荐：<a href="https://github.com/tonsky/FiraCode">FiraCode</a> [<a href="https://github.com/tonsky/FiraCode/wiki">安装教程</a>]</p></blockquote></li></ul><p>显示效果：<br><img src="fonts-theme.png" alt="vscode配色效果"></p><ul><li><p>Settings Sync  </p><blockquote><p>将vscode配置（包括插件）同步到github gist中，方便一键移植。<br><a href="https://juejin.im/post/5b9b5a6f6fb9a05d22728e36">配置教程</a><br>上传配置快捷键: shift+Alt/option+U<br>下载配置快捷键: shift+Alt/option+D</p></blockquote></li><li><p>其他插件</p></li></ul><table><thead><tr><th align="center">插件</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">Chinese Language Pack</td><td align="center">vscode汉化包</td></tr><tr><td align="center">Code Runner</td><td align="center">一键运行所有程序</td></tr><tr><td align="center">Code Spell Checker</td><td align="center">英文单词检查插件</td></tr><tr><td align="center">Edit csv</td><td align="center">csv文件可视化编辑器</td></tr><tr><td align="center">filesize</td><td align="center">在底部bar中显示文件大小</td></tr><tr><td align="center">github pull requests</td><td align="center">集成github</td></tr><tr><td align="center">LaTex Workshop</td><td align="center">集成LaTex</td></tr><tr><td align="center">Live Share</td><td align="center">远程协同编程</td></tr><tr><td align="center">Path Autocomplete</td><td align="center">路径自动补全插件</td></tr><tr><td align="center">Vim</td><td align="center">vim快捷键</td></tr><tr><td align="center">TabNine</td><td align="center">AI补代码</td></tr><tr><td align="center">Markdown Preview Enhanced</td><td align="center">markdown预览和导出神器</td></tr></tbody></table><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><ul><li><p>无法更新？</p><blockquote><p><code>sudo chown $USER ~/Library/Caches/com.microsoft.VSCode.ShipIt/</code></p></blockquote></li><li><p>VS Code报错Module ‘xx’ has no ‘xx’ member pylint(no-member)</p><blockquote><p>在设置中添加<code>"python.linting.pylintArgs": ["--generate-members"]</code></p></blockquote></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 说明文档 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
